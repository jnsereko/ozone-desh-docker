services:

  # Bahmni Appointments
  appointments:
    image: mekomsolutions/appointments
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost:8903/appointments/index.html"
      timeout: 20s
    networks:
      ozone:
        aliases:
          - appointments-1
          
  # mekomsolutions/env-substitution
  env-substitution:
    image: mekomsolutions/env-substitution
    restart: on-failure
    environment:
      - ODOO_PUBLIC_URL=https://${ODOO_HOSTNAME}
      - SENAITE_PUBLIC_URL=https://${SENAITE_HOSTNAME}
      - SUPERSET_PUBLIC_URL=https://${SUPERSET_HOSTNAME}
      - OPENMRS_PUBLIC_URL=https://${O3_HOSTNAME}
    volumes:
       - "${DISTRO_PATH}:/opt/env-substitution/files"
    networks:
      ozone:
        aliases:
          - env-substitution
        
  # OpenMRS 3 Backend
  openmrs:
    image: openmrs/openmrs-reference-application-3-backend:${O3_BACKEND_TAG:-nightly}
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_started
      env-substitution:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    environment:
      OMRS_CONFIG_MODULE_WEB_ADMIN: "true"
      OMRS_CONFIG_AUTO_UPDATE_DATABASE: "true"
      OMRS_CONFIG_CREATE_TABLES: "true"
      OMRS_CONFIG_CONNECTION_SERVER: mysql
      OMRS_CONFIG_CONNECTION_DATABASE: openmrs
      OMRS_CONFIG_CONNECTION_USERNAME: ${OPENMRS_DB_USER:-openmrs}
      OMRS_CONFIG_CONNECTION_PASSWORD: ${OPENMRS_DB_PASSWORD:-openmrs}
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://localhost:8080/openmrs/"
      timeout: 5s
    networks:
      ozone:
        aliases:
          - openmrs
          - openmrs-tomcat
      web:
    labels:
      traefik.enable: "true"
      traefik.http.routers.openmrs.rule: "Host(`${O3_HOSTNAME}`) && PathPrefix(`/openmrs`)"
      traefik.http.routers.openmrs.entrypoints: "websecure"
      traefik.http.services.openmrs.loadbalancer.server.port: 8080
    volumes:
      - "openmrs-data:/openmrs/data"
      - "${OPENMRS_OWAS_PATH:-openmrs-owas}:/openmrs/distribution/openmrs_owas/"
      - "${OPENMRS_CORE_PATH}:/openmrs/distribution/openmrs_core/"
      - "${OPENMRS_MODULES_PATH:-openmrs-modules}:/openmrs/distribution/openmrs_modules/"
      - "${OPENMRS_CONFIG_PATH:-openmrs-config}:/openmrs/distribution/openmrs_config/"
      - "${OPENMRS_CONFIG_CHECKSUMS_PATH:-openmrs-config-checksums}:/openmrs/data/configuration_checksums"
      - "${OZONE_CONFIG_PATH:-ozone-config}/openmrs-properties:/etc/properties/"

  # MySQL
  mysql:
    command: "mysqld --character-set-server=utf8 --collation-server=utf8_general_ci --log-bin --binlog-format=ROW  --server-id=2"
    environment:
      MYSQL_DATABASE: openmrs
      MYSQL_USER: ${OPENMRS_DB_USER}
      MYSQL_PASSWORD: ${OPENMRS_DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      EIP_DB_NAME: ${EIP_DB_NAME}
      EIP_DB_USER: ${EIP_DB_USER}
      EIP_DB_PASSWORD: ${EIP_DB_PASSWORD}
    healthcheck:
      test: "exit 0"
    image: mariadb:10.2
    restart: unless-stopped
    networks:
      ozone:
        aliases:
          - openmrs-mysql
    volumes:
      - "${MYSQL_DATADIR:-mysql-data}:/var/lib/mysql"
      - "${SQL_SCRIPTS_PATH:-./sqls}/mysql:/docker-entrypoint-initdb.d"
    ports:
      - "3306:3306"
    
  # Postgresql
  postgresql:
    image: postgres:13
    restart: unless-stopped
    command: postgres -c wal_level=logical -c max_wal_senders=10 -c max_replication_slots=10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Analytics
      ANALYTICS_DB_NAME: ${ANALYTICS_DB_NAME}
      ANALYTICS_DB_USER: ${ANALYTICS_DB_USER}
      ANALYTICS_DB_PASSWORD: ${ANALYTICS_DB_PASSWORD}
      # Odoo
      ODOO_DB_NAME: odoo
      ODOO_DB_USER: ${ODOO_DB_USER}
      ODOO_DB_PASSWORD: ${ODOO_DB_PASSWORD}
      # Superset
      SUPERSET_DB: ${SUPERSET_DB}
      SUPERSET_DB_USER: ${SUPERSET_DB_USER}
      SUPERSET_DB_PASSWORD: ${SUPERSET_DB_PASSWORD}
    networks:
      ozone:
        aliases:
          - odoo-postgresql
          - odoo-14
    volumes:
      - ${POSTGRES_DATADIR:-postgresql-data}:/var/lib/postgresql/data
      - "${SQL_SCRIPTS_PATH:-./sqls}/postgresql:/docker-entrypoint-initdb.d"
    ports:
      - "5432:5432"
    
  # Odoo
  odoo:
    depends_on:
      postgresql:
        condition: service_healthy
    image: mekomsolutions/odoo
    restart: unless-stopped
    environment:
      - HOST=${POSTGRES_DB_HOST}
      - USER=${ODOO_DB_USER}
      - PASSWORD=${ODOO_DB_PASSWORD}
      - ADDONS=sale_management,stock,account_account,purchase,mrp,odoo_initializer,ozone_settings,mrp_product_expiry,product_expiry,l10n_generic_coa
      - INITIALIZER_DATA_FILES_PATH=/mnt/odoo_csv
      - INITIALIZER_CONFIG_FILE_PATH=/mnt/odoo_config/initializer_config.json
    networks:
      ozone:
        aliases:
          - odoo-14
      web:
    volumes:
      - "${ODOO_FILESTORE:-odoo-filestore}:/var/lib/odoo/filestore"
      - "${ODOO_EXTRA_ADDONS:-odoo-extra-addons}:/mnt/extra-addons"
      - "${ODOO_CONFIG_PATH:-odoo-config}:/mnt/odoo_config"
      - "${ODOO_INITIALIZER_CONFIG_FILE_PATH:-odoo-config}:/mnt/odoo_config/initializer_config.json"
      - "${ODOO_CONFIG_FILE_PATH:-odoo-config}:/etc/properties/odoo.conf"
      - odoo-checksums:/mnt/checksums
    labels:
      traefik.enable: true
      # https
      traefik.http.routers.odoo-https.rule: Host(`${ODOO_HOSTNAME}`)
      traefik.http.routers.odoo-https.entrypoints: websecure
      traefik.http.routers.odoo-https.service: odoo
      traefik.http.routers.odoo-https.middlewares: gzip,sslheader,limit
      #----------------------------- routes for: odoo/web/database || odoo/website/info  -----------------------------
      # https 
      traefik.http.routers.odoo-db-https.rule: Host(`${ODOO_HOSTNAME}`) && (PathPrefix(`/web/database`) || PathPrefix(`/website/info`))
      traefik.http.routers.odoo-db-https.entrypoints: websecure
      traefik.http.routers.odoo-db-https.service: odoo
      traefik.http.routers.odoo-db-https.middlewares: gzip,sslheader,limit
      traefik.http.services.odoo-db-https.loadbalancer.server.port: 8069
      #---------------------------------------- routes for: odoo/longpolling ------------------------------------------------
      # https 
      traefik.http.routers.odoo-im-https.rule: Host(`${ODOO_HOSTNAME}`) && (PathPrefix(`/longpolling`))
      traefik.http.routers.odoo-im-https.entrypoints: websecure
      traefik.http.routers.odoo-im-https.service: odoo-im
      traefik.http.routers.odoo-im-https.middlewares: gzip,sslheader,limit
      
      #====================================================== services ===========================================================
      traefik.http.services.odoo.loadbalancer.server.port: 8069
      traefik.http.services.odoo-im.loadbalancer.server.port: 8072

      #===================================================== middlewares =========================================================
      traefik.http.middlewares.gzip.compress: true
      traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto: https
      traefik.http.middlewares.limit.buffering.memRequestBodyBytes: 20971520
      traefik.http.middlewares.limit.buffering.maxRequestBodyBytes: 20971520

  # OpenMRS 3 Frontend
  frontend:
    image: openmrs/openmrs-reference-application-3-frontend:${O3_FRONTEND_TAG:-nightly}
    restart: unless-stopped
    environment:
      SPA_PATH: /openmrs/spa
      API_URL: /openmrs
      SPA_CONFIG_URLS: ${SPA_CONFIG_URLS}
      SPA_DEFAULT_LOCALE: ${SPA_DEFAULT_LOCALE}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      timeout: 5s
    volumes:
      - "${OZONE_CONFIG_PATH}/frontend:/usr/share/nginx/html/ozone"
      - "./openmrs/frontend:/usr/share/nginx/html/ozone"
    networks:
      ozone:
        aliases:
          - frontend
      web:
    labels:
      traefik.enable: "true"
      traefik.http.routers.frontend.rule: "Host(`${O3_HOSTNAME}`) && PathPrefix(`/openmrs/spa/`)"
      traefik.http.routers.frontend.entrypoints: "websecure"
      traefik.http.routers.frontend.middlewares: frontend-stripprefix,gzip
      traefik.http.services.frontend.loadbalancer.server.port: 80

      traefik.http.routers.home.rule: "Host(`${O3_HOSTNAME}`) && PathPrefix(`/home`)"
      traefik.http.routers.home.entrypoints: "websecure"
      traefik.http.routers.home.middlewares: home-redirectregex

      traefik.http.routers.root.rule: "Host(`${O3_HOSTNAME}`) && PathPrefix(`/`)"  
      traefik.http.routers.root.entrypoints: "websecure"
      traefik.http.routers.root.middlewares: root-redirectregex

      traefik.http.middlewares.frontend-stripprefix.stripprefix.prefixes: /openmrs/spa
      traefik.http.middlewares.frontend-stripprefix.stripprefix.forceslash: false
      traefik.http.middlewares.home-redirectregex.redirectregex.regex: https://${O3_HOSTNAME}/home
      traefik.http.middlewares.home-redirectregex.redirectregex.replacement: https://${O3_HOSTNAME}/openmrs/spa
      traefik.http.middlewares.root-redirectregex.redirectregex.regex: https://${O3_HOSTNAME}
      traefik.http.middlewares.root-redirectregex.redirectregex.replacement: https://${O3_HOSTNAME}/openmrs/spa/home
      traefik.http.middlewares.gzip.compress: true
      
  redis:
    image: redis:7
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      ozone:
        aliases:
          - redis

  # Superset
  superset:
    image: amancevice/superset:1.5.1
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_started
      postgresql:
        condition: service_started
      superset-init:
        condition: service_completed_successfully
    ports:
      - "8088:8088"
    environment:
      - DATABASE_HOST=${POSTGRES_DB_HOST}
      - DATABASE_DB=${SUPERSET_DB}
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD}
      - ANALYTICS_DB_PASSWORD=${ANALYTICS_DB_PASSWORD}
    volumes:
      - ./superset:/etc/superset
    networks:
      ozone:
        aliases:
          - superset
      web:
    labels:
      traefik.enable: "true"
      traefik.http.routers.superset.rule: "Host(`${SUPERSET_HOSTNAME}`)"
      traefik.http.routers.superset.entrypoints: "websecure"
      traefik.http.services.superset.loadbalancer.server.port: 8088
  superset-worker:
    image: amancevice/superset:1.5.1
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_started
      postgresql:
        condition: service_started
      superset-init:
        condition: service_completed_successfully
    volumes:
      - ./superset:/etc/superset
    environment:
      - DATABASE_HOST=${POSTGRES_DB_HOST}
      - DATABASE_DB=${SUPERSET_DB}
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD}
      - ANALYTICS_DB_PASSWORD=${ANALYTICS_DB_PASSWORD}
    command: "celery worker --app=superset.tasks.celery_app:app"
    networks:
      ozone:
        aliases:
          - superset-worker
  superset-init:
    image: amancevice/superset:1.5.1
    restart: on-failure
    depends_on:
      - postgresql
      - redis
    volumes:
      - ./superset:/etc/superset
    environment:
      - DATABASE_HOST=${POSTGRES_DB_HOST}
      - DATABASE_DB=${SUPERSET_DB}
      - DATABASE_USER=${SUPERSET_DB_USER}
      - DATABASE_PASSWORD=${SUPERSET_DB_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD}
      - ANALYTICS_DB_PASSWORD=${ANALYTICS_DB_PASSWORD}
    command: "/etc/superset/superset-init.sh"
    networks:
      ozone:
        aliases:
          - superset-init

  # SENAITE
  senaite:
    environment: 
      - SITE=${SITE}
      - ADMIN_USER=${ADMIN_USER}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    image: mekomsolutions/senaite:latest
    restart: unless-stopped
    volumes:
    - ${SENAITE_CONFIG_PATH}/data:/data/importdata/senaite
    - senaite-filestorage:/data/filestorage
    - senaite-blobstorage:/data/blobstorage
    networks:
      ozone:
        aliases:
          - senaite
      web:
    depends_on: 
      env-substitution:
        condition: service_completed_successfully
    labels:
      - traefik.enable=true
      - traefik.http.services.senaite.loadbalancer.server.port=8080
      - "traefik.http.routers.senaite.rule=Host(`${SENAITE_HOSTNAME}`)"
      - "traefik.http.routers.senaite.middlewares=senaite"
      - "traefik.http.middlewares.senaite.addprefix.prefix=/VirtualHostBase/https/${SENAITE_HOSTNAME}/senaite/VirtualHostRoot"
      
  # EIP Client
  eip-client: 
    image: mekomsolutions/eip-client
    restart: unless-stopped
    volumes:
      - "${EIP_PATH:-eipapp}/config:/config"
      - "${EIP_PATH:-eipapp}/routes:/routes"
      - eip-home:/eip-home
    environment:
      - OAUTH_ENABLED=${OAUTH_ENABLED}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - OAUTH_ACCESS_TOKEN_URI=${OAUTH_ACCESS_TOKEN_URI}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - EIP_DB_NAME=${EIP_DB_NAME}
      - EIP_DB_USER=${EIP_DB_USER}
      - EIP_DB_PASSWORD=${EIP_DB_PASSWORD}
      - OPENMRS_DB_HOST=${OPENMRS_DB_HOST}
      - OPENMRS_DB_PORT=${OPENMRS_DB_PORT}
      - OPENMRS_DB_NAME=${OPENMRS_DB_NAME}
      - OPENMRS_DB_USER=${OPENMRS_DB_USER}
      - OPENMRS_DB_PASSWORD=${OPENMRS_DB_PASSWORD}
      - OPENMRS_USER=${OPENMRS_USER}
      - SENAITE_USERNAME=${ADMIN_USER}
      - SENAITE_PASSWORD=${ADMIN_PASSWORD}
      - OPENMRS_PASSWORD=${OPENMRS_PASSWORD}
      - MYSQL_ADMIN_USER=root
      - MYSQL_ADMIN_USER_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - ODOO_DATABASE=${ODOO_DATABASE}
      - ODOO_USER=${ODOO_USER}
      - ODOO_PASSWORD=${ODOO_PASSWORD}
      - RESULTS_ENCOUNTER_TYPE_UUID=${RESULTS_ENCOUNTER_TYPE_UUID}
      - CONCEPT_COMPLEX_UUID=${CONCEPT_COMPLEX_UUID}
      - OPENMRS_IDENTIFIER_TYPE_UUID=${OPENMRS_IDENTIFIER_TYPE_UUID}
      - DB_EVENT_DESTINATIONS=${DB_EVENT_DESTINATIONS}
      - CREATE_CUSTOMER_IF_NOT_EXIST=${CREATE_CUSTOMER_IF_NOT_EXIST}
      - ODOO_CUSTOMER_EXTERNAL_ID=${ODOO_CUSTOMER_EXTERNAL_ID}
      - ODOO_CUSTOMER_DOB_FIELD=${ODOO_CUSTOMER_DOB_FIELD}
      - ODOO_CUSTOMER_WEIGHT_FIELD=${ODOO_CUSTOMER_WEIGHT_FIELD}
      - EMR_WEIGHT_CONCEPT=${EMR_WEIGHT_CONCEPT}
      - ODOO_ENABLE_EXTRA_CUSTOMER_FIELDS_ROUTE=${ODOO_ENABLE_EXTRA_CUSTOMER_FIELDS_ROUTE}
      - SENAITE_URL=http://senaite:8080
      - OPENMRS_URL=http://openmrs:8080
      - ODOO_URL=http://odoo:8069
    networks:
      ozone:
        aliases:
          - eip-client
    depends_on: 
      env-substitution:
        condition: service_completed_successfully
      openmrs:
        condition: service_started
      odoo:
        condition: service_started
      senaite:
        condition: service_started
      
    ports:
    - "8084:8084"

  ####
  # OpenELIS set up
  ####
  mongo-db:
    container_name: mongo-db
    image: mongo:4.0
    networks:
      ozone:
        aliases:
          - mongo-db
    volumes:
      - "mongo-data:/data/db"
    restart: unless-stopped

  openhim-core:
    container_name: openhim-core
    image: jembi/openhim-core:latest
    restart: unless-stopped
    environment:
      mongo_url: "mongodb://mongo-db/openhim-development"
      mongo_atnaUrl: "mongodb://mongo-db/openhim-development"
      NODE_ENV: "development"
    ports:
      - "8085:8080"
      - "5000:5000"
      - "5001:5001"
    volumes:
      - ./openelis/openhim/core-config.json:/app/config/default.json
    networks:
      ozone:
        aliases:
          - openhim-core
    healthcheck:
     test: "curl -sSk https://openhim-core:8090/heartbeat || exit 1"
     interval: 30s
     timeout: 30s
     retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openhim-core.rule=Host(`${OPENHIM_HOSTNAME}`)"
      - "traefik.http.routers.openhim-core.entrypoints=websecure"
      - "traefik.http.routers.openhim-core.tls=true"
      - "traefik.http.services.openhim-core.loadbalancer.server.port=8080"
    
  openhim-console:
    container_name: openhim-console
    image: jembi/openhim-console:latest
    restart: unless-stopped
    networks:
      ozone:
        aliases:
          - openhim-console
    ports:
      - "9000:80"
    healthcheck:
     test: "curl -sS http://openhim-console || exit 1"
     interval: 30s
     timeout: 30s
     retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openhim-console.rule=Host(`${OPENHIM_HOSTNAME}`)"
      - "traefik.http.routers.openhim-console.entrypoints=websecure"
      - "traefik.http.routers.openhim-console.tls=true"
      - "traefik.http.services.openhim-console.loadbalancer.server.port=80"

  ####
  # OpenELIS
  ####
  certs:
    container_name: oe-certs 
    image: ghcr.io/i-tech-uw/certgen:main
    restart: always
    environment:
        - KEYSTORE_PW="kspass"
        - TRUSTSTORE_PW="tspass"
    networks:
      ozone:
        aliases:
          - certs
    volumes:
        -  key_trust-store-volume:/etc/openelis-global
  
  
  database:
    container_name: openelisglobal-database 
    image: postgres:9.5
    ports:
        - "15432:5432"
    restart: always
    env_file:
        - ./openelis/database/database.env
    volumes:
          # preserves the database between containers
          - db-data:/var/lib/postgresql/data                
          # files here will run on install
          - ./openelis/database/dbInit:/docker-entrypoint-initdb.d
    networks:
      ozone:
        aliases:
          - database
    healthcheck:
        test: [ "CMD", "pg_isready", "-q", "-d", "clinlims", "-U", "clinlims" ]
        timeout: 45s
        interval: 10s
        retries: 10 
            
  oe.openelis.org:
    container_name: openelisglobal-webapp 
    image: ghcr.io/i-tech-uw/openelis-global-2:develop     
    depends_on:
        - database
    ports:
        - "8082:8080"
        - "8443:8443"
    restart: always
    networks:
      ozone:
        aliases:
          - oe.openelis.org

    environment:
        - DEFAULT_PW=adminADMIN! 
        - TZ=Africa/Nairobi
          # context.xml doesn't seem to be able to pick up environment variables directly, so we are passing them in as CATALINA_OPTS
        - CATALINA_OPTS= -Ddatasource.url=jdbc:postgresql://database:5432/clinlims -Ddatasource.username=clinlims
    volumes:
        -  key_trust-store-volume:/etc/openelis-global
        - ./openelis/plugins/:/var/lib/openelis-global/plugins
        - ./openelis/tomcat/oe_server.xml:/usr/local/tomcat/conf/server.xml
    secrets:
        - source: datasource.password
        - source: common.properties
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openelis.rule=Host(`${OPENELIS_HOSTNAME}`)"
      - "traefik.http.routers.openelis.entrypoints=websecure"
      - "traefik.http.routers.openelis.tls=true"
      - "traefik.http.services.openelis.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.openelis-stripprefix.stripprefix.prefixes=/OpenELIS-Global"
      - "traefik.http.routers.openelis.middlewares=openelis-stripprefix@docker"

  fhir.openelis.org:
    container_name: external-fhir-api
    image: hapiproject/hapi:v5.5.1
    ports:
        - "8083:8080"
        - "8444:8443"
    networks:
      ozone:
        aliases:
          - fhir.openelis.org
    restart: always
    environment:
      TZ: Africa/Nairobi

      JAVA_OPTS: "-Djavax.net.ssl.trustStore=/etc/openelis-global/truststore 
                  -Djavax.net.ssl.trustStorePassword=tspass
                  -Djavax.net.ssl.trustStoreType=pkcs12 
                  -Djavax.net.ssl.keyStore=/etc/openelis-global/keystore 
                  -Djavax.net.ssl.keyStorePassword=kspass 
                  -Djavax.net.ssl.keyStoreType=pkcs12"            
    
    volumes:
        -  key_trust-store-volume:/etc/openelis-global
        - ./openelis/tomcat/hapi_server.xml:/usr/local/tomcat/conf/server.xml
            
secrets:
  datasource.password:
    file: ./openelis/properties/datasource.password  
  common.properties:
    file:  ./openelis/properties/common.properties  

version: '3.7'
volumes:
  proxy-tls-certs: ~
  openmrs-data: ~
  mongo-data: ~
  db-data: ~
  key_trust-store-volume: ~
  mysql-data: ~
  openmrs-config: ~
  openmrs-config-checksums: ~
  openmrs-modules: ~
  openmrs-owas: ~
  ozone-config: ~
  ozone-obscalculator: ~
  ozone-apps: ~
  ozone-home: ~
  postgresql-data: ~
  odoo-extra-addons: ~
  odoo-web-data: ~
  odoo-config: ~
  odoo-filestore: ~
  ozone-reports-data: ~
  senaite-data: ~
  eip-home: ~
  redis: ~
  senaite-filestorage: ~
  senaite-blobstorage: ~
  odoo-checksums: ~
networks:
  ozone:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24  
  web:
    external: true
    
